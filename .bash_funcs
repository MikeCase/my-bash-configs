#!/usr/bin/env bash


## Create directory bookmarks
# Not my code.
bookmark_file=${BASE_CONFIG}.bookmarks
. "$bookmark_file"

bm() {
    usage='Usage:
    bm add <name> <path>           Create a bookmark for path.
    bm add <name>                  Create a bookmark for the current directory.
    bm update                      Source the bookmark file.
    bm remove <name>               Remove a bookmark
    bm list                        List available bookmarks'

    case $1 in
        add)
            local path
            if [[ $# -eq 2 ]]; then
                path=.
            elif [[ $# -eq 3 ]]; then
                if [[ -e $3 ]]; then
                    path="$3"
                else
                    echo "bm: ${3}: No such file or directory."
                    return 1
                fi
            else
                echo "$usage"
                return 1
            fi

            if declare | grep "^${2}=" > /dev/null; then
                echo "bm: The name $2 is in use."
                return 1
            fi
            path=$(readlink -f "$path")
            echo ${2}=\""$path"\" >> "$bookmark_file"
            eval ${2}=\""$path"\"
            return 0
            ;;
        update)
            if [[ $# -eq 1 ]]; then
                source "$bookmark_file"
                return 0
            fi
            ;;
        remove)
            if [[ $# -eq 2 ]]; then
                unset $2
                local contents=$(grep -v "^${2}=" "$bookmark_file")
                echo "$contents" > "${bookmark_file}.tmp"
                rm -f "$bookmark_file"
                mv "${bookmark_file}.tmp" "$bookmark_file"
                return 0
            fi
            ;;
        # My addition, list available bookmarks.
        list)
            if [ -e "$bookmark_file" ]; then
                cat "$bookmark_file"
                return 0
            fi
            ;;
    esac

    echo "$usage"
    return 1
}

## Extract any archive
# Not my code.
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)
            echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# Backup and individual directory
# My code.
backup() {
    SRC_DIR=${PWD}
    DEST_DIR=${BACKUP_INDV}

    ## Quick fix: If you remove things from the backup list without
    ## unsetting BACKUP_SOURCES it adds the next source as
    ## whatever the last source WAS + 1, so if you only have
    ## 3 items in backup sources it would list as item 5, not 4.
    ## That doesn't make much sense. Basically this resets BACKUP_SOURCES to exactly
    ## what is in the .backup_sources file.
    unset BACKUP_SOURCES
    source "${BASE_CONFIG}.backup_sources"


    if [ ! -d "$DEST_DIR" ]; then
        mkdir -p "${DEST_DIR}"
    fi


    if [ -f "${BASE_CONFIG}".backup_sources ]; then
        source "${BASE_CONFIG}".backup_sources
        case $SRC_DIR in
            "/etc")
                if ! [ $UID -eq 0 ]; then
                    echo "Protected directory, elevate privs."
                else
                    echo "Adding ${SRC_DIR##*/} to SystemBackup."
                    echo "BACKUP_SOURCES[$((${#BACKUP_SOURCES[@]}+1))]=${SRC_DIR}" >> "${BASE_CONFIG}".backup_sources
                fi
                ;;
            *)
                echo "Adding ${SRC_DIR##*/} to SystemBackup."
                echo "BACKUP_SOURCES[$((${#BACKUP_SOURCES[@]}+1))]=${SRC_DIR}" >> "${BASE_CONFIG}".backup_sources
            ;;
        esac
    else
        echo "No .backup_sources found. Creating one."
        touch "${BASE_CONFIG}.backup_sources"
        echo "Try again."
    fi

    # BAK_FILE=${PWD##*/}-$(date +%-Y%-m%-d)$(date +%-H%M%S).tgz

    # tar --create --gzip --file="${DEST_DIR}${BAK_FILE}" -C "$SRC_DIR" *

}

# Backup a collection of files/directories.
# Essentially a self defined set of files
# for a "system backup" quick and easy.
# My code
sysbackup() {
    DEST_DIR=${BACKUP_SYS}

    BACKUP_SOURCES=${BASE_CONFIG}.backup_sources

    if [ -f "$BACKUP_SOURCES" ] && ! [ -s "$BACKUP_SOURCES" ]; then
        echo "Now go run backup from any directory. It will add that directory to your system backup list."
        return 1
    elif ! [ -f "$BACKUP_SOURCES" ]; then
        touch "$BACKUP_SOURCES"
        echo "Put the directories/files you want to backup into $BACKUP_SOURCES"
        return 1
    elif [ -f "$BACKUP_SOURCES" ]; then
        . "${BACKUP_SOURCES}"
    fi

    INDV_FILES=()

    if [ ! -d "$DEST_DIR" ]; then
        mkdir "${DEST_DIR}"
    fi

    for d in "${BACKUP_SOURCES[@]}"; do
        if [ -d "$d" ]; then
            cd "${d}" || return
            BAK_FILE=${PWD##*/}-$(date +%-Y%-m%-d)$(date +%-H%M%S).tgz
            tar --create --gzip --file="${DEST_DIR}${BAK_FILE}" -C "$d" -- *
        fi
        if [ -f "$d" ]; then
            INDV_FILES+=("${d}")
        fi
    done

    for f in "${INDV_FILES[@]}"; do
        BAK_FILE="indv_files-$(date +%-Y%-m%-d)$(date +%-H%M%S)"
        tar --append --file="${DEST_DIR}${BAK_FILE}" -C "${f%/*}" "${f##*/}"
    done
        gzip -S ".tgz" "${DEST_DIR}${BAK_FILE}"
}

make_tunnel() {
    read -p "Local tunnel port [2500]: " lport
    if [ -z $lport ]; then
        lport='2500'
    fi

    read -p "Remote service port [80]: " rport
    if [ -z $rport ]; then
        rport='80'
    fi

    read -p "Remote service local IP address [127.0.0.1]: " r_ip
    if [ -z $r_ip ]; then
        r_ip='127.0.0.1'
    fi


    read -p "SSH Connection [user@host]: " constring
    if [ -z $constring ]; then
        echo 'You must provide a connection string (user@host)'
        exit 1
    fi

    echo "To access your tunneled service goto https://127.0.0.1:$lport"

    ssh -L "$lport:$r_ip:$rport" "$constring"
}

dorganize(){
    ## Keep my downloads folder CLEAN & Organzied
    for file in "${DLDIR}"*; do
        if [ -f "${file}" ]; then
            case "$file" in
                *.iso)
                    mv "$file" "${DLDIR}"ISOs/
                ;;
                *.pdf | *.csv | *.txt | *.xlsx | *.md)
                    mv "$file" "${DLDIR}"documents/
                ;;
                *.tar.gz | *.7z | *.Z | *.tar.bz2 | *.bz2 | *.gz | *.zip | *.tbz2 | *.tgz | *.rar | *.tar)
                    mv "$file" "${DLDIR}"archives/
                ;;
                *.deb)
                    mv "$file" "${DLDIR}"deb_packages/
                ;;
                *.mp3 | *.ogg)
                    mv "$file" "${DLDIR}"music/
                ;;
                *.wav)
                    mv "$file" "${DLDIR}"SFX/
                ;;
                *.mpv | *.mp4 | *.avi | *.mpg | *.mpeg)
                    mv "$file" "${DLDIR}"videos/
                ;;
                *.jpg | *.jpeg | *.png | *.tiff | *.bmp | *.webp)
                    mv "$file" "${DLDIR}"images/
                ;;
            esac
        fi
    done
}